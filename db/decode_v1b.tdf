--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV GX" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:04:25:18:06:29:SJ cbx_lpm_add_sub 2017:04:25:18:06:29:SJ cbx_lpm_compare 2017:04:25:18:06:29:SJ cbx_lpm_decode 2017:04:25:18:06:29:SJ cbx_mgl 2017:04:25:18:09:28:SJ cbx_nadder 2017:04:25:18:06:30:SJ cbx_stratix 2017:04:25:18:06:30:SJ cbx_stratixii 2017:04:25:18:06:30:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_v1b
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2626w[1..0]	: WIRE;
	w_anode2635w[3..0]	: WIRE;
	w_anode2652w[3..0]	: WIRE;
	w_anode2662w[3..0]	: WIRE;
	w_anode2672w[3..0]	: WIRE;
	w_anode2682w[3..0]	: WIRE;
	w_anode2692w[3..0]	: WIRE;
	w_anode2702w[3..0]	: WIRE;
	w_anode2712w[3..0]	: WIRE;
	w_anode2724w[1..0]	: WIRE;
	w_anode2731w[3..0]	: WIRE;
	w_anode2742w[3..0]	: WIRE;
	w_anode2752w[3..0]	: WIRE;
	w_anode2762w[3..0]	: WIRE;
	w_anode2772w[3..0]	: WIRE;
	w_anode2782w[3..0]	: WIRE;
	w_anode2792w[3..0]	: WIRE;
	w_anode2802w[3..0]	: WIRE;
	w_data2624w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode2802w[3..3], w_anode2792w[3..3], w_anode2782w[3..3], w_anode2772w[3..3], w_anode2762w[3..3], w_anode2752w[3..3], w_anode2742w[3..3], w_anode2731w[3..3]), ( w_anode2712w[3..3], w_anode2702w[3..3], w_anode2692w[3..3], w_anode2682w[3..3], w_anode2672w[3..3], w_anode2662w[3..3], w_anode2652w[3..3], w_anode2635w[3..3]));
	w_anode2626w[] = ( (w_anode2626w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2635w[] = ( (w_anode2635w[2..2] & (! w_data2624w[2..2])), (w_anode2635w[1..1] & (! w_data2624w[1..1])), (w_anode2635w[0..0] & (! w_data2624w[0..0])), w_anode2626w[1..1]);
	w_anode2652w[] = ( (w_anode2652w[2..2] & (! w_data2624w[2..2])), (w_anode2652w[1..1] & (! w_data2624w[1..1])), (w_anode2652w[0..0] & w_data2624w[0..0]), w_anode2626w[1..1]);
	w_anode2662w[] = ( (w_anode2662w[2..2] & (! w_data2624w[2..2])), (w_anode2662w[1..1] & w_data2624w[1..1]), (w_anode2662w[0..0] & (! w_data2624w[0..0])), w_anode2626w[1..1]);
	w_anode2672w[] = ( (w_anode2672w[2..2] & (! w_data2624w[2..2])), (w_anode2672w[1..1] & w_data2624w[1..1]), (w_anode2672w[0..0] & w_data2624w[0..0]), w_anode2626w[1..1]);
	w_anode2682w[] = ( (w_anode2682w[2..2] & w_data2624w[2..2]), (w_anode2682w[1..1] & (! w_data2624w[1..1])), (w_anode2682w[0..0] & (! w_data2624w[0..0])), w_anode2626w[1..1]);
	w_anode2692w[] = ( (w_anode2692w[2..2] & w_data2624w[2..2]), (w_anode2692w[1..1] & (! w_data2624w[1..1])), (w_anode2692w[0..0] & w_data2624w[0..0]), w_anode2626w[1..1]);
	w_anode2702w[] = ( (w_anode2702w[2..2] & w_data2624w[2..2]), (w_anode2702w[1..1] & w_data2624w[1..1]), (w_anode2702w[0..0] & (! w_data2624w[0..0])), w_anode2626w[1..1]);
	w_anode2712w[] = ( (w_anode2712w[2..2] & w_data2624w[2..2]), (w_anode2712w[1..1] & w_data2624w[1..1]), (w_anode2712w[0..0] & w_data2624w[0..0]), w_anode2626w[1..1]);
	w_anode2724w[] = ( (w_anode2724w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2731w[] = ( (w_anode2731w[2..2] & (! w_data2624w[2..2])), (w_anode2731w[1..1] & (! w_data2624w[1..1])), (w_anode2731w[0..0] & (! w_data2624w[0..0])), w_anode2724w[1..1]);
	w_anode2742w[] = ( (w_anode2742w[2..2] & (! w_data2624w[2..2])), (w_anode2742w[1..1] & (! w_data2624w[1..1])), (w_anode2742w[0..0] & w_data2624w[0..0]), w_anode2724w[1..1]);
	w_anode2752w[] = ( (w_anode2752w[2..2] & (! w_data2624w[2..2])), (w_anode2752w[1..1] & w_data2624w[1..1]), (w_anode2752w[0..0] & (! w_data2624w[0..0])), w_anode2724w[1..1]);
	w_anode2762w[] = ( (w_anode2762w[2..2] & (! w_data2624w[2..2])), (w_anode2762w[1..1] & w_data2624w[1..1]), (w_anode2762w[0..0] & w_data2624w[0..0]), w_anode2724w[1..1]);
	w_anode2772w[] = ( (w_anode2772w[2..2] & w_data2624w[2..2]), (w_anode2772w[1..1] & (! w_data2624w[1..1])), (w_anode2772w[0..0] & (! w_data2624w[0..0])), w_anode2724w[1..1]);
	w_anode2782w[] = ( (w_anode2782w[2..2] & w_data2624w[2..2]), (w_anode2782w[1..1] & (! w_data2624w[1..1])), (w_anode2782w[0..0] & w_data2624w[0..0]), w_anode2724w[1..1]);
	w_anode2792w[] = ( (w_anode2792w[2..2] & w_data2624w[2..2]), (w_anode2792w[1..1] & w_data2624w[1..1]), (w_anode2792w[0..0] & (! w_data2624w[0..0])), w_anode2724w[1..1]);
	w_anode2802w[] = ( (w_anode2802w[2..2] & w_data2624w[2..2]), (w_anode2802w[1..1] & w_data2624w[1..1]), (w_anode2802w[0..0] & w_data2624w[0..0]), w_anode2724w[1..1]);
	w_data2624w[2..0] = data_wire[2..0];
END;
--VALID FILE
