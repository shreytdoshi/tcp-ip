/*
 * layer.c
 *
 *  Created on: Nov 10, 2017
 *      Author: shreytej
 */

#include <altera_avalon_sgdma.h>
#include <altera_avalon_sgdma_descriptor.h>//include the sgdma descriptor
#include <altera_avalon_sgdma_regs.h>//include the sgdma registers
#include <altera_avalon_pio_regs.h>//include the PIO registers
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>

#include "../include/stack.h"
#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"
#include "system.h"


// Function Prototypes
void rx_ethernet_isr (void *context);
void tx_ethernet_isr (void *context);
char * receive(int device);

// Create a receive frame vector
unsigned char rx_frame[1024] = { 0 };

//Transmit Frame
unsigned char tx_frame[1024] = {0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC8,0x16,0x0B,0x93,0x67,0xDA,0x00,0x2E};

// Triple-speed Ethernet MegaCore base address
volatile int * tse = (int *) TSE_BASE;

//Other variables
int in=0;

// Create sgdma transmit and receive devices
alt_sgdma_dev * sgdma_tx_dev;
alt_sgdma_dev * sgdma_rx_dev;

// Allocate descriptors in the descriptor_memory (onchip memory)
alt_sgdma_descriptor tx_descriptor		__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor tx_descriptor_end	__attribute__ (( section ( ".descriptor_memory" )));

alt_sgdma_descriptor rx_descriptor  	__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor rx_descriptor_end  __attribute__ (( section ( ".descriptor_memory" )));

int transmissionStatus = 0;

int transmit(int device, struct packet * pack){


	//Specify the addresses of the PHY devices to be accessed through MDIO interface
	if(!device){
		*(tse + 0x0F) = 0x10;
	}
	else {
		*(tse + 0x0F) = 0x11;
	}

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
	while ( *(tse + 0x02) != ( *(tse +0x02 ) | 0x00800220));

	//MAC FIFO Configuration
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;//tx_section_empty
	*(tse + 0x0E ) = 0x03;//tx_almost_full
	*(tse + 0x0D ) = 0x08;//tx_almost_empty
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;//rx_section_empty
	*(tse + 0x0C ) = 0x08;//rx_almost_full
	*(tse + 0x0B ) = 0x08;//rx_almost_empty
	*(tse + 0x0A ) = 0x00;//tx_section_full
	*(tse + 0x08 ) = 0x00;//rx_section_full

	// Initialize the MAC address
	if(!device){
		*(tse + 0x03) = 0x17231C00;
		*(tse + 0x04) = 0x0000CB4A;
	}
	else {
		//MAC2: C8-16-0B-93-67-DA
		*(tse + 0x03) = 0x930B16C8;
		*(tse + 0x04) = 0x0000DA67;
	}
	// MAC function configuration
	*(tse + 0x05) = 1518;//frame length
	*(tse + 0x17) = 12;//tx_ipg_length
	*(tse + 0x06) = 0xFFFF;//pause_quanta
	*(tse + 0x02) = 0x00800220;//config register

	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
	while ( *(tse + 0x02) != ( 0x00800220 ) ) alt_printf("Setting the reset");

	//Enable read and write transfers, gigabit Ethernet operation and promiscuous mode

	*(tse + 0x02) = *(tse + 0x02) | 0x0000023B;
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0000023B ) );

	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
	if (sgdma_tx_dev == NULL) {
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
		return -1;
	} else alt_printf ("Opened scatter-gather dma transmit device\n");

	int i = 17;

	memmove(tx_frame+16, pack->sourceIP, 4);
	memmove(tx_frame+20, pack->destIP, 4);
	memmove(tx_frame+24, pack->payload->sourcePort, 2);
	memmove(tx_frame+26, pack->payload->destPort, 2);
	memmove(tx_frame+28, pack->payload->syn, 1);
	memmove(tx_frame+29, pack->payload->fin, 1);
	memmove(tx_frame+30, pack->payload->seqNum, 1);
	memmove(tx_frame+31, pack->payload->ackNum, 1);
	memmove(tx_frame+32, pack->payload->data, 1);
	memset(tx_frame+33, 0, 28);

	//memmove(tx_frame, "\x00\x00\xFF\xFF\xFF\xFF\xFF,\xFF\xC8\x16\x0B\x93\x67\xDA\x00\x2E",16);
	//int j = 0;

	//	while(j<10){

	// Set interrupts for the sgdma transmit device
	alt_avalon_sgdma_register_callback(sgdma_tx_dev, (alt_avalon_sgdma_callback) tx_ethernet_isr, 0x00000014, NULL );

	// Create sgdma transmit descriptor
	alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0);

	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_tx_dev, &tx_descriptor);

	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);


	//	j++;
	//}
	//
	//alt_avalon_sgdma_stop(sgdma_tx_dev);

	//alt_printf( "Frames Transmittedssa: %x \n", *(tse + 0x1A) );

	//return 1;
	return transmissionStatus;
}


/********************************************************************************
 * This program demonstrates use of the Ethernet in the DE2i-150 board.
 ********************************************************************************/
char * receive(int device){


	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
	if (sgdma_rx_dev == NULL) {
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
		//return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback(sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor );

	//Specify the addresses of the PHY devices to be accessed through MDIO interface

	if(!device){
		*(tse + 0x0F) = 0x10;
	}
	else {
		*(tse + 0x0F) = 0x11;
	}

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
	while ( *(tse + 0x02) != ( *(tse +0x02 ) | 0x00800220));

	//MAC FIFO Configuration
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;//tx_section_empty
	*(tse + 0x0E ) = 0x03;//tx_almost_full
	*(tse + 0x0D ) = 0x08;//tx_almost_empty
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;//rx_section_empty
	*(tse + 0x0C ) = 0x08;//rx_almost_full
	*(tse + 0x0B ) = 0x08;//rx_almost_empty
	*(tse + 0x0A ) = 0x00;//tx_section_full
	*(tse + 0x08 ) = 0x00;//rx_section_full

	// Initialize the MAC address
	if(!device){
		*(tse + 0x03) = 0x17231C00;
		*(tse + 0x04) = 0x0000CB4A;
	}
	else {
		//MAC2: C8-16-0B-93-67-DA
		*(tse + 0x03) = 0x930B16C8;
		*(tse + 0x04) = 0x0000DA67;
	}
	// MAC function configuration
	*(tse + 0x05) = 1518;//frame length
	*(tse + 0x17) = 12;//tx_ipg_length
	*(tse + 0x06) = 0xFFFF;//pause_quanta
	*(tse + 0x02) = 0x00800220;//config register


	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
	while ( *(tse + 0x02) != ( 0x00800220 ) ) alt_printf("Setting the reset");

	// Enable read and write transfers, gigabit Ethernet operation and promiscuous mode

	*(tse + 0x02) = *(tse + 0x02) | 0x0080023B;//3rd bit changed to 0/8

	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0080023B ) );


	while (1) {
		in=IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
		if (in == 1){
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x01);//turn on or turn off the LED
		}
		else{
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
		}
	}


	return rx_frame;
}

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
 ****************************************************************************************/
void rx_ethernet_isr (void *context)
{

	//Include your code to show the values of the source and destination addresses of the received frame. For example:
	if(in == 1){ // check if the switch is on
		alt_printf( "Destination address: %x,%x,%x,%x%x,%x \n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5],rx_frame[6], rx_frame[7] );
		alt_printf( "Source address: %x,%x,%x,%x,%x,%x \n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11],rx_frame[12], rx_frame[13] );
	}
	else {
		alt_printf( "Destination address: %x,%x,%x,%x%x,%x \n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5],rx_frame[6], rx_frame[7] );
				alt_printf( "Source address: %x,%x,%x,%x,%x,%x \n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11],rx_frame[12], rx_frame[13] );
		alt_printf( "MAC ADDRESS 0: %x \n", *(tse + 0x18) );
		alt_printf( "Successful frames: %x \n", *(tse + 0x1A) );
		alt_printf( "Broadcast frames: %x \n", *(tse + 0x26) );
	}
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
		;

	//alt_avalon_sgdma_stop(sgdma_rx_dev);
	//strncpy(readBuffer, rx_frame, strlen(rx_frame));
	//goto rec;

	// Create new receive sgdma descriptor
	//alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );

	// Set up non-blocking transfer of sgdma receive descriptor
	//alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor);
	 }

void tx_ethernet_isr (void *context){

	transmissionStatus = 1;

	alt_printf("Destination address: %x,%x,%x,%x,%x,%x \n", tx_frame[2], tx_frame[3], tx_frame[4], tx_frame[5],tx_frame[6], tx_frame[7] );
	alt_printf("Source address: %x,%x,%x,%x,%x,%x\n", tx_frame[8], tx_frame[9], tx_frame[10], tx_frame[11], tx_frame[12], tx_frame[13] );
	alt_printf("Source IP: %x%x%x%x\n", tx_frame[16], tx_frame[17], tx_frame[18], tx_frame[19]);
	alt_printf("Destination IP: %x%x%x%x\n", tx_frame[20], tx_frame[21], tx_frame[22], tx_frame[23]);
	alt_printf("Source Port: %x%x%\n Destination Port: %x%x%\n ", tx_frame[24], tx_frame[25], tx_frame[26], tx_frame[27]);
	alt_printf("SYN: %x FIN: %x%\n Seq: %x Ack: %x%\n ", tx_frame[28], tx_frame[29], tx_frame[30], tx_frame[31]);
	alt_printf("Data: %x%\n ", tx_frame[32]);
	alt_printf("Frames Transmitted: %x\n", *(tse + 0x1A) );
	alt_printf("Pause Frames Transmitted: %x \n", *(tse + 0x20));
	alt_printf("Config Reg: %x\n", *(tse + 0x02));

	// Wait until transmit descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
		;

	/*	// Create new sgdma transmit descriptor
	alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, strlen(tx_frame)+6+6+2, 0, 1, 1, 0);

	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_tx_dev, &tx_descriptor);*/
}

